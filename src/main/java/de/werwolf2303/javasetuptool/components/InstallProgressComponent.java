package de.werwolf2303.javasetuptool.components;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import de.werwolf2303.javasetuptool.RunnableWEC;

import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * The component has a progress bar and an operation log that displays what was done during the installation process.
 * <br> <img alt="HTMLComponent" src="./doc-files/InstallProgressComponent.png" />
 */
public class InstallProgressComponent implements Component {
    final ArrayList<FileOperation> fileOperations = new ArrayList<>();
    JProgressBar progress;
    JTextArea operationlog;
    JLabel operationpath;
    JScrollPane pane;
    final ArrayList<String> files = new ArrayList<>();
    final ArrayList<String> folders = new ArrayList<>();
    private JPanel contentPanel;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
        operationpath = new JLabel();
        operationpath.setText("Label");
        contentPanel.add(operationpath, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        progress = new JProgressBar();
        contentPanel.add(progress, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 20), new Dimension(-1, 20), new Dimension(-1, 20), 0, false));
        pane = new JScrollPane();
        contentPanel.add(pane, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        operationlog.setMargin(new Insets(0, 0, 0, 0));
        pane.setViewportView(operationlog);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }

    private void createUIComponents() {
        operationlog = new JTextArea() {
            @Override
            public void append(String str) {
                super.append(str);
                pane.getVerticalScrollBar().setValue(pane.getVerticalScrollBar().getMaximum());
            }
        };
    }

    /**
     * A builder for creating a new {@link FileOperation} instance.
     */
    public static class FileOperationBuilder {
        private final FileOperation internal = new FileOperation();

        /**
         * The type of the operation
         *
         * @param type the type of the operation
         * @return the builder itself
         */
        public FileOperationBuilder setType(FileOperationTypes type) {
            internal.operationType = type;
            return this;
        }

        /**
         * The URL of the file to download
         *
         * @param url - the URL of the file to download
         * @return the builder itself
         */
        public FileOperationBuilder setDownloadURL(String url) {
            if (internal.operationType != FileOperationTypes.DOWNLOAD) {
                throw new UnsupportedOperationException("Download only available when using the DOWNLOAD type");
            }
            internal.url = url;
            return this;
        }

        /**
         * The feature the operation corresponds to.
         *
         * @param feature - The feature the operation corresponds to.
         * @return - the builder itself
         */
        public FileOperationBuilder setForFeature(FeatureSelectionComponent.Feature feature) {
            internal.feature = feature;
            return this;
        }

        /**
         * The stream to read from.
         *
         * @param stream - the stream to read from
         * @return the builder itself
         */
        public FileOperationBuilder setFrom(InputStream stream) {
            internal.fromStream = stream;
            return this;
        }

        /**
         * The file to read from.
         *
         * @param from - the file to read from
         * @return the builder itself
         */
        public FileOperationBuilder setFrom(String from) {
            internal.from = from;
            return this;
        }

        /**
         * The file to write to.
         *
         * @param to - the file to write to
         * @return - the builder itself
         */
        public FileOperationBuilder setTo(String to) {
            internal.to = to;
            return this;
        }

        /**
         * A custom operation to run
         *
         * @param run - The runnable that contains the code to run
         * @return - the builder itself
         */
        public FileOperationBuilder setCustom(RunnableWEC run) {
            internal.customCode = run;
            return this;
        }
    }

    @Override
    public void makeVisible(JFrame frame, JButton custom1, JButton custom2, JButton nextButton, JButton previousButton, JButton cancelButton, HashMap<String, Object> storage) {
        previousButton.setVisible(false);
        nextButton.setEnabled(false);
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                doOperations(nextButton, cancelButton, storage);
            }
        });
        t.start();
        contentPanel.setVisible(true);
    }

    @Override
    public void makeInvisible(JFrame frame, JButton custom1, JButton custom2, JButton nextButton, JButton previousButton, JButton cancelButton, HashMap<String, Object> storage) {
        contentPanel.setVisible(false);
    }

    @Override
    public void init(JFrame frame, int width, int height, HashMap<String, Object> setupVariables) {
        progress.setMinimum(0);
        progress.setValue(0);
    }

    @Override
    public boolean onNext() {
        return false;
    }

    @Override
    public boolean onPrevious() {
        return false;
    }

    @Override
    public void onCustom1() {

    }

    @Override
    public void onCustom2() {

    }

    @Override
    public JPanel getContainer() {
        return contentPanel;
    }

    /**
     * <b>Required</b> method.  Adds a file operation to the list of operations that will be performed.
     *
     * @param builder - The builder for the file operation.  This is used to set all the parameters.
     */
    public void addFileOperation(FileOperationBuilder builder) {
        fileOperations.add(builder.internal);
    }

    boolean failState = false;

    void doOperations(JButton nextButton, JButton cancelButton, HashMap<String, Object> storage) {
        ArrayList<FeatureSelectionComponent.Feature> features = (ArrayList<FeatureSelectionComponent.Feature>) storage.getOrDefault("features", new ArrayList<FeatureSelectionComponent>());
        progress.setMaximum(fileOperations.size());
        for (FileOperation operation : fileOperations) {
            if (operation.feature != null) {
                if (!features.contains(operation.feature)) {
                    continue;
                }
            }
            switch (operation.operationType) {
                case COPY:
                    try {
                        operationpath.setText(new File(operation.to).getAbsolutePath());
                        operationlog.append("Copy from=>'" + operation.from + "' to=>'" + operation.to + "'\n");
                        Files.copy(Paths.get(new File(operation.from).getAbsolutePath()), Paths.get(new File(operation.to).getAbsolutePath()), StandardCopyOption.REPLACE_EXISTING);
                        files.add(operation.to);
                        operation.succeeded = true;
                    } catch (Exception e) {
                        operation.succeeded = false;
                    }
                    break;
                case MOVE:
                    try {
                        operationpath.setText(new File(operation.to).getAbsolutePath());
                        operationlog.append("Moving from=>'" + operation.from + "' to=>'" + operation.to + "'\n");
                        Files.move(Paths.get(new File(operation.from).getAbsolutePath()), Paths.get(new File(operation.to).getAbsolutePath()), StandardCopyOption.REPLACE_EXISTING);
                        files.add(operation.to);
                        operation.succeeded = true;
                    } catch (Exception e) {
                        operation.succeeded = false;
                    }
                    break;
                case CREATEFILE:
                    try {
                        operationpath.setText(new File(operation.from).getAbsolutePath());
                        operationlog.append("Creating file=>'" + operation.from + "'\n");
                        if (new File(operation.from).exists()) {
                            files.add(operation.from);
                            operation.succeeded = true;
                            break;
                        }
                        operation.succeeded = new File(operation.from).createNewFile();
                        files.add(operation.from);
                    } catch (Exception e) {
                        operation.succeeded = false;
                    }
                    break;
                case CREATEDIR:
                    operationpath.setText(new File(operation.from).getAbsolutePath());
                    operationlog.append("Creating directory=>'" + operation.from + "'\n");
                    if (new File(operation.from).exists()) {
                        files.add(operation.from);
                        operation.succeeded = true;
                        break;
                    }
                    operation.succeeded = new File(operation.from).mkdir();
                    folders.add(operation.from);
                    break;
                case DELETE:
                    operationpath.setText(new File(operation.from).getAbsolutePath());
                    operationlog.append("Deleting=>'" + operation.from + "'\n");
                    operation.succeeded = new File(operation.from).delete();
                    if (new File(operation.from).isDirectory()) {
                        folders.add(operation.from);
                    } else {
                        files.add(operation.from);
                    }
                    break;
                case COPYSTREAM:
                    operationpath.setText(new File(operation.to).getAbsolutePath());
                    operationlog.append("Copying stream to=>" + operation.to + "\n");
                    try {
                        Files.copy(operation.fromStream, Paths.get(new File(operation.to).getAbsolutePath()), StandardCopyOption.REPLACE_EXISTING);
                        files.add(operation.to);
                        operation.succeeded = true;
                    } catch (Exception e) {
                        operation.succeeded = false;
                    }
                    break;
                case CUSTOM:
                    operationpath.setText("Executing custom Java");
                    operationlog.append("Executing custom java\n");
                    operation.customCode.run();
                    operation.succeeded = true;
                    break;
                case DOWNLOAD:
                    operationpath.setText("Downloading " + operation.url);
                    operationlog.append("Downloading File from=>" + operation.url + "\n");
                    try {
                        URL url = new URL(operation.url);
                        HttpURLConnection httpConnection = (HttpURLConnection) (url.openConnection());
                        long completeFileSize = httpConnection.getContentLength();
                        BufferedInputStream in = new BufferedInputStream(httpConnection.getInputStream());
                        FileOutputStream fos = new FileOutputStream(
                                operation.to);
                        BufferedOutputStream bout = new BufferedOutputStream(
                                fos, 1024);
                        byte[] data = new byte[1024];
                        long downloadedFileSize = 0;
                        int x;
                        float last = 0;
                        while ((x = in.read(data, 0, 1024)) >= 0) {
                            downloadedFileSize += x;
                            float percentage = ((float) downloadedFileSize) / completeFileSize * 100;
                            if (!String.format("%.0f", percentage).equals(String.format("%.0f", last))) {
                                operationlog.append("Downloading File from=>" + operation.url + " Progress=>" + String.format("%.0f", percentage) + "%\n");
                            }
                            last = percentage;
                            bout.write(data, 0, x);
                        }
                        bout.close();
                        in.close();
                        files.add(operation.to);
                        operation.succeeded = true;
                    } catch (Exception e) {
                        operation.succeeded = false;
                    }
                    break;
            }
            if (!operation.succeeded) {
                failState = true;
                break;
            }
            progress.setValue(progress.getValue() + 1);
        }
        if (failState) {
            progress.setForeground(Color.RED);
            operationlog.append("Installation failed!\n");
            contentPanel.setBackground(Color.red);
            cancelButton.setText("Close");
        } else {
            operationpath.setText("Install Finished");
            operationsFinished(nextButton);
        }
    }

    void operationsFinished(JButton nextButton) {
        nextButton.setText("Next >");
        nextButton.setEnabled(true);
    }

    /**
     * The type of the install operation
     */
    public enum FileOperationTypes {
        CREATEFILE,
        CREATEDIR,
        MOVE,
        COPY,
        COPYSTREAM,
        DELETE,
        CUSTOM,
        DOWNLOAD
    }

    /**
     * A simple class that holds the information about a install operation
     * <br>e.g., a file download, a directory creation or a copy of a file
     */
    public static class FileOperation {
        String from = "";
        InputStream fromStream;
        String to = "";
        boolean succeeded = false;
        RunnableWEC customCode;
        String url = "";
        FileOperationTypes operationType;
        FeatureSelectionComponent.Feature feature = null;
    }
}
