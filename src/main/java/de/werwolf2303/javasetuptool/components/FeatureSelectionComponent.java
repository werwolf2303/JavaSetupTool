package de.werwolf2303.javasetuptool.components;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import de.werwolf2303.javasetuptool.swingextensions.JCheckBoxTree;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import java.awt.*;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * Component that contains a selectable list out of checkboxes that represent features.
 * <br> <img alt="HTMLComponent" src="./doc-files/FeatureSelectionComponent.png" />
 */
public class FeatureSelectionComponent implements Component {

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * 
     */
    private void $$$setupUI$$$() {
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        l = new JLabel();
        l.setText("Select features to install");
        contentPanel.add(l, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scrollPane = new JScrollPane();
        contentPanel.add(scrollPane, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * 
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }

    /**
     * Class that describes a feature
     */
    public static class Feature {
        /**
         * The name of the feature
         */
        public String name;
        /**
         * If the feature should be selected at default
         */
        public boolean selected;
        /**
         * If the feature is required
         */
        public boolean required;

        /**
         * Constructor for a new feature
         * @param name {@link #name}
         * @param selected {@link #selected}
         * @param required {@link #required}
         */
        private Feature(String name, boolean selected, boolean required) {
            this.name = name;
            this.selected = selected;
            this.required = required;
        }
    }

    /**
     * Builder for creating a feature, that can be selected by the user
     */
    public static class FeatureBuilder {
        public String name;
        public boolean selected = true;
        public boolean required = false;

        /**
         * Set the name of the feature (For identification and displaying)
         * @param name - name for the feature
         * @return - this builder
         */
        public FeatureBuilder setName(String name) {
            this.name = name;
            return this;
        }

        /**
         * Set the selected state of the checkbox
         * @param selected - true to select the checkbox
         * @return - this builder
         */
        public FeatureBuilder setSelected(boolean selected) {
            this.selected = selected;
            return this;
        }

        /**
         * Set if the feature is required
         * @param required - true to make the feature required
         * @return - this builder
         */
        public FeatureBuilder setRequired(boolean required) {
            this.required = required;
            return this;
        }

        /**
         * Build the Feature object
         * @see Feature
         * @return - a new Feature object with the specified properties
         */
        public Feature build() {
            return new Feature(
                    name,
                    selected,
                    required
            );
        }
    }

    JCheckBoxTree tree;
    JLabel l;
    private JPanel contentPanel;
    private JScrollPane scrollPane;
    final ArrayList<Feature> features = new ArrayList<>();
    DefaultMutableTreeNode root;
    DefaultTreeModel model;

    @Override
    public void makeVisible(JFrame frame, JButton custom1, JButton custom2, JButton nextButton, JButton previousButton, JButton cancelButton, HashMap<String, Object> storage) {
        tree.addCheckActionListener(checkBox -> {
            for (Feature feature : features) {
                if (feature.name.equals(checkBox.getText())) {
                    if (feature.required) {
                        if (!checkBox.isSelected()) {
                            nextButton.setEnabled(false);
                            JOptionPane.showMessageDialog(frame, feature.name + " is required");
                        } else {
                            nextButton.setEnabled(true);
                        }
                    } else {
                        feature.selected = checkBox.isSelected();
                    }
                    break;
                }
            }
        });
    }

    @Override
    public void makeInvisible(JFrame frame, JButton custom1, JButton custom2, JButton nextButton, JButton previousButton, JButton cancelButton, HashMap<String, Object> storage) {
        storage.put("features", features);
        tree.removeCheckActionListener();
    }

    @Override
    public void init(JFrame frame, int width, int height, HashMap<String, Object> setupVariables) {
        root = new DefaultMutableTreeNode(setupVariables.getOrDefault("programname", "N/A"));
        tree = new JCheckBoxTree(scrollPane.getViewport().getWidth());

        for (Feature feature : features) {
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(feature.name);
            root.add(node);
        }
        model = new DefaultTreeModel(root);
        tree.setModel(model);
        scrollPane.setViewportView(tree);
    }

    @Override
    public boolean onNext() {
        return false;
    }

    @Override
    public boolean onPrevious() {
        return false;
    }

    @Override
    public void onCustom1() {

    }

    @Override
    public void onCustom2() {

    }

    @Override
    public JPanel getContainer() {
        return contentPanel;
    }

    /**
     * Adds a new feature to the list
     * @see FeatureBuilder
     * @param feature - feature to be added
     * @return - the class itself
     */
    public FeatureSelectionComponent addFeature(Feature feature) {
        features.add(feature);
        return this;
    }
}
